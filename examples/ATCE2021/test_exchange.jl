using AnalyticalEOR
using Plots

Œ∂·µ¢ = [	0.025,   # COO	
        0.0061,  # S    
        1e-9,  # Gly

		]

push!(Œ∂·µ¢, Œ∂·µ¢[1] + 2Œ∂·µ¢[2] + 2Œ∂·µ¢[3]) # Anion Cl conc. by charge balance

# * Injected concentrations
Œ∂‚±º =  [  0.025,   # COO
        0.0184,  # S
        0.10,  # Gly
     	]

push!(Œ∂‚±º, Œ∂‚±º[1] + 2Œ∂‚±º[2] + 2Œ∂‚±º[3] ) # Anion Cl conc. by charge balance

ŒΩ =  [1, 2, 1, 1] # charges

# * Equilibrium constants and 
K‚ÇÇ‚ÇÅ = 10^0.7 #10^1.67148
K‚ÇÉ‚ÇÅ = 10^-0.25  
K‚ÇÇ‚ÇÉ = K‚ÇÇ‚ÇÅ / K‚ÇÉ‚ÇÅ

# * Cation Exchange Capacity
œÅ = 2.8082271 # g/cm3
œï = 0.59
cec = 0.06 # 
Z = cec * ((1 - œï) / œï) * œÅ # Conversion of cation exchange capacity into moles/liter
Z = 0.06

ec = ExchangeConstants(K‚ÇÇ‚ÇÅ, K‚ÇÉ‚ÇÅ, K‚ÇÇ‚ÇÉ, Z ŒΩ)

it = solve_Ion_Transport(Œ∂·µ¢, Œ∂‚±º, ec)

it.W2
it.W3

plot_ODEs(it)

plot_velocities(it)

c = it.c
cÃÇ = it.cÃÇ
Œª = it.Œª
œÉ = it.œÉ

t = 0.5
plot(Œª * t, c, xlim=(0, 1), layout=4,
		title=["COO" "S" "Gly" "Na"], label=false, lw=2, ylabel="Concentration, M", marker=:circle)

plot(Œª * t, cÃÇ, xlim=(0, 1), layout=4,
		title=["COO" "S" "Gly" "Na"], label=false, lw=2, ylabel="Concentration, M", marker=:circle)
plot!(yscale=:log10, ylim=(1e-5, 1))

c‚Çò‚ÇÇ = it.c‚Çò‚ÇÇ
c‚±º = it.c‚±º
c·µ¢ = it.c·µ¢
c‚Çò‚ÇÅ = it.c‚Çò‚ÇÅ 
c‚ÇÇ‚Çó, c‚ÇÉ‚Çó, œÉ‚Çó, Œª‚Çó = integral_eigenvalues(c‚±º, c‚Çò‚ÇÇ, 3, it.sol3, ec)
c‚ÇÇ·µ£, c‚ÇÉ·µ£, œÉ·µ£, Œª·µ£ = integral_eigenvalues(c‚Çò‚ÇÇ, c‚Çò‚ÇÅ, 2, it.sol2, ec)

c‚±º[3]
c‚Çò‚ÇÇ[3]
c‚Çò‚ÇÅ[3]
c·µ¢[3]

c‚Çò‚ÇÇ

it.W2
it.W3

plot!(xlim=(0, 0.7), ylim=(-0.5, .7))

plot!([ c‚Çò‚ÇÅ[3] c‚Çò‚ÇÇ[3] c‚±º[3]],
[ c‚Çò‚ÇÅ[2] c‚Çò‚ÇÇ[2] c‚±º[2]],
seriestype=:scatter, labels=["M1" "M2" "J"]
)


plot!(ylim=(0, 80), xlim=(0, 80), scale=:log)

plot_velocities(it)

it.c‚Çò‚ÇÇ[3]
it.c‚±º[3]
it.c·µ¢[3]

plot(it.c[1:end-2,3], Œª[1:end-2])
plot!(c‚ÇÉ‚Çó, Œª‚Çó)
plot!(c‚ÇÉ·µ£, Œª·µ£)
plot!(ylim=(0,1), legend=false)


œÉ‚ÇÇ‚Çò‚ÇÅ = eigenvectors([c‚Çò‚ÇÅ[2] c‚Çò‚ÇÅ[3] c‚±º[4]], ec)[1] 
œÉ‚ÇÇ‚Çò‚ÇÇ = eigenvectors([c‚Çò‚ÇÇ[2] c‚Çò‚ÇÇ[3] c‚±º[4]], ec)[1]
œÉ‚ÇÉ‚Çò‚ÇÇ = eigenvectors([c‚Çò‚ÇÇ[2] c‚Çò‚ÇÇ[3] c‚±º[4]], ec)[2]
œÉ‚ÇÉ‚±º =  eigenvectors([c‚±º[2] c‚±º[3] c‚±º[4]], ec)[2] 



c‚ÇÇ‚Çó, c‚ÇÉ‚Çó, œÉ‚Çó, Œª‚Çó = integral_eigenvalues(c‚±º, c‚Çò‚ÇÇ, 3, it.sol3, ec)
c‚ÇÇ·µ£, c‚ÇÉ·µ£, œÉ·µ£, Œª·µ£ = integral_eigenvalues(c‚Çò‚ÇÇ, c‚Çò‚ÇÅ, 2, it.sol2, ec)

c‚ÇÇ‚Çó

1 ./ Œª‚Çó
1 ./ Œª·µ£

œÉ‚ÇÇ‚Çò‚ÇÅ

RH_eigenvalues(c‚Çò‚ÇÇ, c‚Çò‚ÇÅ, ec)



c·µ¢ = Œ∂·µ¢ .* ŒΩ
c‚±º = Œ∂‚±º .* ŒΩ

# * First intermediate point
cÃÇ·µ¢ = isotherm(c·µ¢, ec)
cÃÇ‚Çò‚ÇÅ = cÃÇ·µ¢
c‚Çò‚ÇÅ = flowingConcentrations(cÃÇ‚Çò‚ÇÅ, c‚±º[4], ec)


# * Second intermediate point
c‚Çò‚ÇÇ, sol2, sol3 = solve_IntegralCurve2(c‚Çò‚ÇÅ, c‚±º, ec)


c‚ÇÉ‚Çò‚ÇÇ = collect(range(c‚±º[3], c‚Çò‚ÇÅ[3], length=100000))

solved=false
i = 1
c‚ÇÉ‚ÇÇ = c‚ÇÉ‚Çò‚ÇÇ[1]
sol2 = M2_ODE2(c‚ÇÉ‚ÇÇ, c‚±º, c‚Çò‚ÇÅ, ec)

c‚ÇÉ‚ÇÅ = c‚ÇÉ‚Çò‚ÇÇ[2700]
sol3 = M2_ODE3(c‚ÇÉ‚ÇÅ, c‚±º, c‚Çò‚ÇÅ, ec)

plot!(sol2.t, sol2.u)
plot!(sol3.t, sol3.u)

plot([ c‚Çò‚ÇÅ[3] c‚±º[3]],
[ c‚Çò‚ÇÅ[2] c‚±º[2]],
seriestype=:scatter, labels=["M1" "J"]
)
plot!(yscale=:log10)

c‚±º
c‚Çò‚ÇÅ

œÉ‚ÇÇ‚Çò‚ÇÅ = eigenvectors([c‚Çò‚ÇÅ[2] c‚Çò‚ÇÅ[3] c‚±º[4]], ec)[1] 
œÉ‚ÇÇ‚Çò‚ÇÇ = eigenvectors([c‚Çò‚ÇÇ[2] c‚Çò‚ÇÇ[3] c‚±º[4]], ec)[1]
œÉ‚ÇÉ‚Çò‚ÇÇ = eigenvectors([c‚Çò‚ÇÇ[2] c‚Çò‚ÇÇ[3] c‚±º[4]], ec)[2]
œÉ‚ÇÉ‚±º =  eigenvectors([c‚±º[2] c‚±º[3] c‚±º[4]], ec)[2] 


c‚ÇÇ‚Çó, c‚ÇÉ‚Çó, œÉ‚Çó, Œª‚Çó  = RH_eigenvalues(c‚±º, c‚Çò‚ÇÇ, ec)
c‚ÇÇ‚Çó, c‚ÇÉ‚Çó, œÉ‚Çó, Œª‚Çó = integral_eigenvalues(c‚±º, c‚Çò‚ÇÇ, 3, sol3, ec)


plot(it.sol3)
plot!(it.sol2)

sol3 = M2_ODE3(c‚Çò‚ÇÇ[3], c‚±º, c‚Çò‚ÇÅ, ec)
sol2 = M2_ODE2(c‚Çò‚ÇÇ[3], c‚±º, c‚Çò‚ÇÅ, ec)


M2_ODE_solutions(c‚Çò‚ÇÇ[3], c‚±º, c‚Çò‚ÇÅ, ec)


plot(sol2)

plot(sol3, color="blue", label="W3")
plot(sol2, color="red", label="W2")
plot!([ c‚Çò‚ÇÅ[3] c‚±º[3]],
[ c‚Çò‚ÇÅ[2]  c‚±º[2]],
seriestype=:scatter, labels=["M1" "J"]
)
plot!(ylim=(1e-12, 1), xlim=(1e-10, 1),
xlabel="Ca", ylabel="Mg",
scale=:log10
)


c‚ÇÇ‚Çó, c‚ÇÉ‚Çó, œÉ‚Çó, Œª‚Çó  = RH_eigenvalues(c‚±º, c‚Çò‚ÇÇ, ec)






# * Get intermediate points
sol2, sol3 = M2_ODE_solutions(c‚Çò‚ÇÇ[3], c‚±º, c‚Çò‚ÇÅ, ec)


œÉ‚ÇÅ = 1
œÉ‚ÇÇ‚Çò‚ÇÇ = eigenvectors([c‚Çò‚ÇÇ[2] c‚Çò‚ÇÇ[3] c‚±º[4]], ec)[1]
œÉ‚ÇÇ‚Çò‚ÇÅ = eigenvectors([c‚Çò‚ÇÅ[2] c‚Çò‚ÇÅ[3] c‚±º[4]], ec)[1] 
œÉ‚ÇÉ‚±º =  eigenvectors([c‚±º[2] c‚±º[3] c‚±º[4]], ec)[2] 
œÉ‚ÇÉ‚Çò‚ÇÇ = eigenvectors([c‚Çò‚ÇÇ[2] c‚Çò‚ÇÇ[3] c‚±º[4]], ec)[2]

œÉ‚ÇÉ[1]
œÉ‚ÇÉ[end]

if œÉ‚ÇÉ‚Çò‚ÇÇ >= œÉ‚ÇÉ‚±º
    ùí≤‚ÇÉ = :shock
else
    ùí≤‚ÇÉ = :rarefication
end

if œÉ‚ÇÇ‚Çò‚ÇÅ >= œÉ‚ÇÇ‚Çò‚ÇÇ
    ùí≤‚ÇÇ = :shock
else
    ùí≤‚ÇÇ = :rarefication
end

c‚ÇÉ·µ£ = collect(range(c‚Çò‚ÇÇ[3], c‚Çò‚ÇÅ[3],  length=100))[2:end - 1]
c‚ÇÉ‚Çó = collect(range(c‚±º[3], c‚Çò‚ÇÇ[3],  length=100))[2:end - 1]

function rankine_hugoniot(c‚ÇÇ, c‚ÇÉ, c‚Çò‚ÇÅ, ec)
    cÃÇ‚ÇÅ, cÃÇ‚ÇÇ, cÃÇ‚ÇÉ, cÃÇ‚ÇÑ = isotherm([c‚ÇÇ, c‚ÇÉ, c‚Çò‚ÇÅ[4]], ec)
    cÃÇ‚ÇÅ‚Çò‚ÇÅ, cÃÇ‚ÇÇ‚Çò‚ÇÅ, cÃÇ‚ÇÉ‚Çò‚ÇÅ, cÃÇ‚ÇÑ‚Çò‚ÇÅ = isotherm(c‚Çò‚ÇÅ, ec)

    LHS = ((cÃÇ‚ÇÇ + c‚ÇÇ) - (cÃÇ‚ÇÇ‚Çò‚ÇÅ + c‚Çò‚ÇÅ[2])) / (c‚ÇÇ - c‚Çò‚ÇÅ[2])
    RHS = ((cÃÇ‚ÇÉ + c‚ÇÉ) - (cÃÇ‚ÇÉ‚Çò‚ÇÅ + c‚Çò‚ÇÅ[3])) / (c‚ÇÉ - c‚Çò‚ÇÅ[3])

    return LHS - RHS
end

function RH_eigenvalues(c‚ÇÇ, c‚ÇÉ, c‚Çó, ec)
    cÃÇ‚ÇÅ, cÃÇ‚ÇÇ, cÃÇ‚ÇÉ, cÃÇ‚ÇÑ = isotherm([c‚ÇÇ, c‚ÇÉ, c‚Çó[4]], ec)
    cÃÇ‚ÇÅ‚Çó, cÃÇ‚ÇÇ‚Çó, cÃÇ‚ÇÉ‚Çó, cÃÇ‚ÇÑ‚Çó = isotherm(c‚Çó, ec)

    return ((cÃÇ‚ÇÉ + c‚ÇÉ) - (cÃÇ‚ÇÉ‚Çó + c‚Çó[3])) / (c‚ÇÉ - c‚Çó[3])
end


loss(c‚ÇÇ, c‚ÇÉ) = rankine_hugoniot(c‚ÇÇ, c‚ÇÉ, c‚Çò‚ÇÅ, ec)
loss2(c‚ÇÇ, c‚ÇÉ) = rankine_hugoniot(c‚ÇÇ, c‚ÇÉ, c‚±º, ec)

c‚ÇÇ·µ£ = [find_zero(c -> loss(c, c‚ÇÉ), [c‚Çò‚ÇÅ[2], c‚Çò‚ÇÇ[2] + 1e-3]) for c‚ÇÉ in c‚ÇÉ·µ£]
c‚ÇÇ‚Çó = [find_zero(c -> loss2(c, c‚ÇÉ), [c‚Çò‚ÇÇ[2], c‚±º[2] - 1e-3]) for c‚ÇÉ in c‚ÇÉ‚Çó]


plot(sol2, color="red", label="W3")
plot!(sol3, color="blue", label="W2")
plot!([c‚Çò‚ÇÅ[3] c‚Çò‚ÇÇ[3] c‚±º[3]],
      [c‚Çò‚ÇÅ[2] c‚Çò‚ÇÇ[2] c‚±º[2]],
      seriestype=:scatter, labels=["M1" "M2" "J"]
     )
plot!(ylim=(1e-12, 1), xlim=(1e-10, 1),
     scale=:log, xlabel="Ca", ylabel="Mg",
)


plot(c‚ÇÉ·µ£, c‚ÇÇ·µ£, lw=3, label="Shock2", scale=:log10)
plot!(c‚ÇÉ‚Çó, c‚ÇÇ‚Çó, lw=3, label="Shock3", scale=:log10)
plot!(sol2, color="red", label="W2")
plot!(sol3, color="red", label="W3")
plot!([c·µ¢[3] c‚Çò‚ÇÅ[3] c‚Çò‚ÇÇ[3] c‚±º[3]],
[c·µ¢[2] c‚Çò‚ÇÅ[2] c‚Çò‚ÇÇ[2] c‚±º[2]],
seriestype=:scatter, labels=["I" "M1" "M2" "J"])
plot!(ylim=(1e-5, 1), xlim=(1e-6, 1),
scale=:log, xlabel="Ca", ylabel="Mg",)


œÉÃÉ‚ÇÇ = [RH_eigenvalues(c‚ÇÇ, c‚ÇÉ, c‚Çò‚ÇÅ, ec) for (c‚ÇÇ, c‚ÇÉ) in zip(c‚ÇÇ·µ£, c‚ÇÉ·µ£)]
œÉÃÉ‚ÇÉ = [RH_eigenvalues(c‚ÇÇ, c‚ÇÉ, c‚±º, ec) for (c‚ÇÇ, c‚ÇÉ) in zip(c‚ÇÇ‚Çó, c‚ÇÉ‚Çó)]

ŒªÃÉ‚ÇÇ = 1 ./ œÉÃÉ‚ÇÇ
ŒªÃÉ‚ÇÉ = 1 ./ œÉÃÉ‚ÇÉ


œÉ‚ÇÇ = [eigenvectors([c‚ÇÇ c‚ÇÉ c‚±º[4]], ec)[1] for (c‚ÇÇ, c‚ÇÉ) in zip(c‚ÇÇ·µ£, c‚ÇÉ·µ£)]
œÉ‚ÇÉ = [eigenvectors([c‚ÇÇ c‚ÇÉ c‚±º[4]], ec)[2] for (c‚ÇÇ, c‚ÇÉ) in zip(c‚ÇÇ‚Çó, c‚ÇÉ‚Çó)]
Œª‚ÇÇ = 1 ./ œÉ‚ÇÇ
Œª‚ÇÉ = 1 ./ œÉ‚ÇÉ

plot(c‚ÇÉ·µ£,  ŒªÃÉ‚ÇÇ, label="S2")
plot!(c‚ÇÉ‚Çó,  ŒªÃÉ‚ÇÉ, label="S3")
plot!(c‚ÇÉ·µ£,  Œª‚ÇÇ, label="R2")
plot!(c‚ÇÉ‚Çó,  Œª‚ÇÉ, label="R3")
plot!([c‚Çò‚ÇÅ[3] c‚Çò‚ÇÇ[3] c‚±º[3]],
[c‚Çò‚ÇÅ[2] c‚Çò‚ÇÇ[2] c‚±º[2]],
seriestype=:scatter, labels=["M1" "M2" "J"]
)



plot(c‚ÇÉ·µ£,  œÉÃÉ‚ÇÇ, label="S2")
plot!(c‚ÇÉ‚Çó,  œÉÃÉ‚ÇÉ, label="S3")
plot!(c‚ÇÉ·µ£,  œÉ‚ÇÇ, label="R2")
plot!(c‚ÇÉ‚Çó,  œÉ‚ÇÉ, label="R3")
plot!(yscale=:log10)


œÉÃÉ‚ÇÇ‚Çò‚ÇÇ =  RH_eigenvalues(c‚Çò‚ÇÇ[2], c‚Çò‚ÇÇ[3], c‚Çò‚ÇÅ, ec)
œÉÃÉ‚ÇÉ‚±º =  RH_eigenvalues(c‚±º[2], c‚±º[3], c‚Çò‚ÇÇ, ec)
ŒªÃÉ‚ÇÇ‚Çò‚ÇÇ = 1 ./ œÉÃÉ‚ÇÇ‚Çò‚ÇÇ 
ŒªÃÉ‚ÇÉ‚±º = 1 ./ œÉÃÉ‚ÇÉ‚±º 


c‚ÇÇ = [c‚±º[2];  c‚±º[2]; c‚Çò‚ÇÇ[2]  ; c‚Çò‚ÇÇ[2] ; c‚Çò‚ÇÅ[2]; c‚Çò‚ÇÅ[2];  c·µ¢[2]; c·µ¢[2]]
c‚ÇÉ = [c‚±º[3];  c‚±º[3]; c‚Çò‚ÇÇ[2]  ; c‚Çò‚ÇÇ[2] ; c‚Çò‚ÇÅ[3]; c‚Çò‚ÇÅ[3];  c·µ¢[3]; c·µ¢[3]]
c‚ÇÑ = [c‚±º[4];  c‚±º[4]; c‚±º[4]   ; c‚±º[4]  ;  c‚Çò‚ÇÅ[4]; c‚Çò‚ÇÅ[4]; c·µ¢[4]; c·µ¢[4]]
Œª =  [ 0.0001  ;  ŒªÃÉ‚ÇÉ‚±º   ; ŒªÃÉ‚ÇÉ‚±º  ;  ŒªÃÉ‚ÇÇ‚Çò‚ÇÇ  ;  ŒªÃÉ‚ÇÇ‚Çò‚ÇÇ  ;  1    ;   1 ;   100 ] 
c‚ÇÅ = c‚ÇÑ .- c‚ÇÉ .- c‚ÇÇ

c = [c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ]

t = 0.5
plot(Œª * t, c, xlim=(0, 1), layout=4,
		title=["Na" "Mg" "Ca" "Cl"], label=false, lw=2, ylabel="Concentration, M", marker="circle")


plot(Œª * t, c‚ÇÉ, xlim=(0, 1),
		title=["Ca"], label=false, lw=2, ylabel="Concentration, M", marker=:circle)


plot(Œª * t, c‚ÇÇ, xlim=(0, 1),
		title=["Mg"], label=false, lw=2, ylabel="Concentration, M", marker=:circle)






œÉ‚ÇÉ‚±º =  eigenvectors([c‚±º[2] c‚±º[3] c‚±º[4]], ec)[2] 
œÉ‚ÇÉ‚Çò‚ÇÇ = eigenvectors([c‚Çò‚ÇÇ[2] c‚Çò‚ÇÇ[3] c‚±º[4]], ec)[2]

c‚ÇÉ‚Çó = collect(range(c‚±º[3], c‚Çò‚ÇÇ[3],  length=100))[2:end - 1]
œÉ‚ÇÉ = [eigenvectors([c‚ÇÇ c‚ÇÉ c‚±º[4]], ec)[2] for (c‚ÇÇ, c‚ÇÉ) in zip(c‚ÇÇ‚Çó, c‚ÇÉ‚Çó)]

3