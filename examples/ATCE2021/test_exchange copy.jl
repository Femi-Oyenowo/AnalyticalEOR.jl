using AnalyticalEOR
using Plots
using Roots
using LaTeXStrings
using DifferentialEquations
theme(:dao; grid_lw=0.2)

Œ∂·µ¢ = [	0.0017, # Na
0.00124/2, # Mg
0.0062/2, # Ca
]
push!(Œ∂·µ¢, Œ∂·µ¢[1] + 2Œ∂·µ¢[2] + 2Œ∂·µ¢[3]) # Anion Cl conc. by charge balance

# * Injected concentrations
Œ∂‚±º = [	0.47, 	# Na
0.098/2, # Mg
0.023/2, 	# Ca
]

push!(Œ∂‚±º, Œ∂‚±º[1] + 2Œ∂‚±º[2] + 2Œ∂‚±º[3] ) # Anion Cl conc. by charge balance

ŒΩ =  [1, 2, 2, 1] # charges

# * Equilibrium constants and 
K‚ÇÇ‚ÇÅ = 10^1.67148
K‚ÇÉ‚ÇÅ = 10^1.83148     
K‚ÇÇ‚ÇÉ =  10^-0.16

# * Cation Exchange Capacity
œÅ = 2.8082271 # g/cm3
œï = 0.59
cec = 0.06 # 
Z = cec * ((1 - œï) / œï) * œÅ # Conversion of cation exchange capacity into moles/liter

ec = ExchangeConstants(K‚ÇÇ‚ÇÅ, K‚ÇÉ‚ÇÅ, K‚ÇÇ‚ÇÉ, Z, ŒΩ)

it = solve_Ion_Transport(Œ∂·µ¢, Œ∂‚±º, ec)

    c·µ¢ = Œ∂·µ¢ .* ec.ŒΩ
    c‚±º = Œ∂‚±º .* ec.ŒΩ

    # * First intermediate point
    cÃÇ·µ¢ = isotherm(c·µ¢, ec)
    cÃÇ‚Çò‚ÇÅ = cÃÇ·µ¢
    c‚Çò‚ÇÅ = flowingConcentrations(cÃÇ‚Çò‚ÇÅ, c‚±º[4], ec)

	c‚ÇÉ‚Çò‚ÇÇ = collect(range(c‚±º[3], c‚Çò‚ÇÅ[3], length=10000))



	c‚ÇÉ‚Çò‚ÇÇ = collect(range(c‚±º[3], c‚Çò‚ÇÅ[3], length=100000))
	# c‚ÇÉ‚Çò‚ÇÇ = collect(10 .^ range(log10(c‚±º[3]), log10(c‚Çò‚ÇÅ[3]), length=10000))
	
    i = binary_search(try_M2_ODE2, c‚ÇÉ‚Çò‚ÇÇ, c‚±º, c‚Çò‚ÇÅ, ec)
    sol2 = M2_ODE2(c‚ÇÉ‚Çò‚ÇÇ[i], c‚±º, c‚Çò‚ÇÅ, ec)


    i = binary_search(try_M2_ODE3, c‚ÇÉ‚Çò‚ÇÇ, c‚±º, c‚Çò‚ÇÅ, ec)
    sol3 = M2_ODE3(c‚ÇÉ‚Çò‚ÇÇ[i-1], c‚±º, c‚Çò‚ÇÅ, ec)

    # * Second intermediate point
    c‚Çò‚ÇÇ, sol2, sol3 = solve_IntegralCurve(c‚Çò‚ÇÅ, c‚±º, ec)

    c‚ÇÉ‚Çò‚ÇÇ = fzero(c -> sol2(c) - sol3(c), c‚ÇÉ‚Çò‚ÇÇ[end])

    c‚Çò‚ÇÅ
    c‚Çò‚ÇÇ

    œÉ‚ÇÅ = 1
    œÉ‚ÇÇ‚Çò‚ÇÅ = eigenvectors([c‚Çò‚ÇÅ[2] c‚Çò‚ÇÅ[3] c‚±º[4]], ec)[1] 
    œÉ‚ÇÇ‚Çò‚ÇÇ = eigenvectors([c‚Çò‚ÇÇ[2] c‚Çò‚ÇÇ[3] c‚±º[4]], ec)[1]
    œÉ‚ÇÉ‚Çò‚ÇÇ = eigenvectors([c‚Çò‚ÇÇ[2] c‚Çò‚ÇÇ[3] c‚±º[4]], ec)[2]
    œÉ‚ÇÉ‚±º =  eigenvectors([c‚±º[2] c‚±º[3] c‚±º[4]], ec)[2] 

    if œÉ‚ÇÉ‚Çò‚ÇÇ >= œÉ‚ÇÉ‚±º
        ùí≤‚ÇÉ = :shock
        c‚ÇÇ‚Çó, c‚ÇÉ‚Çó, œÉ‚Çó, Œª‚Çó  = RH_eigenvalues(c‚±º, c‚Çò‚ÇÇ, ec)
    else
        ùí≤‚ÇÉ = :rarefaction
        c‚ÇÇ‚Çó, c‚ÇÉ‚Çó, œÉ‚Çó, Œª‚Çó = integral_eigenvalues(c‚±º, c‚Çò‚ÇÇ, 3, sol3, ec)
    end

    if œÉ‚ÇÇ‚Çò‚ÇÅ >= œÉ‚ÇÇ‚Çò‚ÇÇ
        ùí≤‚ÇÇ = :shock
        c‚ÇÇ·µ£, c‚ÇÉ·µ£, œÉ·µ£, Œª·µ£  = RH_eigenvalues(c‚Çò‚ÇÇ, c‚Çò‚ÇÅ, ec)
    else
        ùí≤‚ÇÇ = :rarefication
        c‚ÇÇ·µ£, c‚ÇÉ·µ£, œÉ·µ£, Œª·µ£ = integral_eigenvalues(c‚Çò‚ÇÇ, c‚Çò‚ÇÅ, 2, sol2, ec)
    end

    c‚ÇÑ‚Çó = c‚±º[4] * ones(length(c‚ÇÉ‚Çó))
    c‚ÇÑ·µ£ = c‚±º[4] * ones(length(c‚ÇÉ·µ£))

    # * Get ions composition and their wave velocities
    c‚ÇÇ = [c‚±º[2];  c‚ÇÇ‚Çó;c‚Çò‚ÇÇ[2]; c‚ÇÇ·µ£ ;c‚Çò‚ÇÅ[2]; c‚Çò‚ÇÅ[2]; c·µ¢[2]; c·µ¢[2]]
    c‚ÇÉ = [c‚±º[3];  c‚ÇÉ‚Çó;c‚Çò‚ÇÇ[3]; c‚ÇÉ·µ£ ;c‚Çò‚ÇÅ[3]; c‚Çò‚ÇÅ[3]; c·µ¢[3]; c·µ¢[3]]
    c‚ÇÑ = [c‚±º[4];  c‚ÇÑ‚Çó;c‚Çò‚ÇÇ[4]; c‚ÇÑ·µ£ ;c‚Çò‚ÇÅ[4]; c‚Çò‚ÇÅ[4]; c·µ¢[4]; c·µ¢[4]]
    Œª =  [1e-3;   Œª‚Çó; Œª‚Çó[end] ;Œª·µ£  ; Œª·µ£[end]; 1   ;   1  ;   10 ] 
    
    œÉ = 1 ./ Œª
    c‚ÇÅ = c‚ÇÑ .- c‚ÇÉ .- c‚ÇÇ
    
    c = [c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ]
    
    cÃÇ = zeros(size(c))
    for i in 1:size(c)[1]
        cÃÇ[i,:] = isotherm(c[i,:], ec)
    end
