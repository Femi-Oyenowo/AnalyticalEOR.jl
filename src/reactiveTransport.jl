
function solve_Ion_Transport(Œ∂·µ¢, Œ∂‚±º, ec::IonExchangeProblem)
    c·µ¢ = Œ∂·µ¢ .* ec.ŒΩ
    c‚±º = Œ∂‚±º .* ec.ŒΩ

    # * First intermediate point
    cÃÇ·µ¢ = isotherm(c·µ¢, ec)
    cÃÇ‚Çò‚ÇÅ = cÃÇ·µ¢
    c‚Çò‚ÇÅ = flowingConcentrations(cÃÇ‚Çò‚ÇÅ, c‚±º[4], ec)

    # * Second intermediate point
    c‚Çò‚ÇÇ, sol2, sol3 = solve_IntegralCurve(c‚Çò‚ÇÅ, c‚±º, ec)


    œÉ‚ÇÅ = 1
    œÉ‚ÇÇ‚Çò‚ÇÅ = eigenvectors([c‚Çò‚ÇÅ[2] c‚Çò‚ÇÅ[3] c‚±º[4]], ec)[1] 
    œÉ‚ÇÇ‚Çò‚ÇÇ = eigenvectors([c‚Çò‚ÇÇ[2] c‚Çò‚ÇÇ[3] c‚±º[4]], ec)[1]
    œÉ‚ÇÉ‚Çò‚ÇÇ = eigenvectors([c‚Çò‚ÇÇ[2] c‚Çò‚ÇÇ[3] c‚±º[4]], ec)[2]
    œÉ‚ÇÉ‚±º =  eigenvectors([c‚±º[2] c‚±º[3] c‚±º[4]], ec)[2] 

    if œÉ‚ÇÉ‚Çò‚ÇÇ >= œÉ‚ÇÉ‚±º
        ùí≤‚ÇÉ = :shock
        c‚ÇÇ‚Çó, c‚ÇÉ‚Çó, œÉ‚Çó, Œª‚Çó  = RH_eigenvalues(c‚±º, c‚Çò‚ÇÇ, ec)
    else
        ùí≤‚ÇÉ = :rarefaction
        c‚ÇÇ‚Çó, c‚ÇÉ‚Çó, œÉ‚Çó, Œª‚Çó = integral_eigenvalues(c‚±º, c‚Çò‚ÇÇ, 3, sol3, ec)
    end

    if œÉ‚ÇÇ‚Çò‚ÇÅ >= œÉ‚ÇÇ‚Çò‚ÇÇ
        ùí≤‚ÇÇ = :shock
        c‚ÇÇ·µ£, c‚ÇÉ·µ£, œÉ·µ£, Œª·µ£  = RH_eigenvalues(c‚Çò‚ÇÇ, c‚Çò‚ÇÅ, ec)
    else
        ùí≤‚ÇÇ = :rarefaction
        c‚ÇÇ·µ£, c‚ÇÉ·µ£, œÉ·µ£, Œª·µ£ = integral_eigenvalues(c‚Çò‚ÇÇ, c‚Çò‚ÇÅ, 2, sol2, ec)
    end

    c‚ÇÑ‚Çó = c‚±º[4] * ones(length(c‚ÇÉ‚Çó))
    c‚ÇÑ·µ£ = c‚±º[4] * ones(length(c‚ÇÉ·µ£))

    # * Get ions composition and their wave velocities
    c‚ÇÇ = [c‚±º[2];  c‚ÇÇ‚Çó;c‚Çò‚ÇÇ[2]; c‚ÇÇ·µ£ ;c‚Çò‚ÇÅ[2]; c‚Çò‚ÇÅ[2]; c·µ¢[2]; c·µ¢[2]]
    c‚ÇÉ = [c‚±º[3];  c‚ÇÉ‚Çó;c‚Çò‚ÇÇ[3]; c‚ÇÉ·µ£ ;c‚Çò‚ÇÅ[3]; c‚Çò‚ÇÅ[3]; c·µ¢[3]; c·µ¢[3]]
    c‚ÇÑ = [c‚±º[4];  c‚ÇÑ‚Çó;c‚Çò‚ÇÇ[4]; c‚ÇÑ·µ£ ;c‚Çò‚ÇÅ[4]; c‚Çò‚ÇÅ[4]; c·µ¢[4]; c·µ¢[4]]
    Œª =  [1e-3;   Œª‚Çó; Œª‚Çó[end] ;Œª·µ£  ; Œª·µ£[end]; 1   ;   1  ;   100 ] 
    
    œÉ = 1 ./ Œª
    c‚ÇÅ = c‚ÇÑ .- c‚ÇÉ .- c‚ÇÇ
    
    c = [c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ]
    
    cÃÇ = zeros(size(c))
    for i in 1:size(c)[1]
        cÃÇ[i,:] = isotherm(c[i,:], ec)
    end

    return IonExchangeSolution(
            Œ∂·µ¢,
            Œ∂‚±º,
            ec.ŒΩ,
            ec.K‚ÇÇ‚ÇÅ,
            ec.K‚ÇÉ‚ÇÅ,
            ec.K‚ÇÇ‚ÇÉ,
            ec.Z,
            c·µ¢, c‚Çò‚ÇÅ, c‚Çò‚ÇÇ, c‚±º,
            c, cÃÇ , Œª, œÉ,
            ùí≤‚ÇÇ, ùí≤‚ÇÉ,
            )
end



function isotherm(c::T, ec::IonExchangeProblem) where {T}
    K‚ÇÇ‚ÇÅ = ec.K‚ÇÇ‚ÇÅ
    K‚ÇÉ‚ÇÅ = ec.K‚ÇÉ‚ÇÅ
    Z = ec.Z
    ŒΩ = ec.ŒΩ

	if size(c)[1] == 4
		c‚ÇÅ, c‚ÇÇ, c‚ÇÉ = c
	else
		c‚ÇÇ, c‚ÇÉ, c‚ÇÑ = c
		c‚ÇÅ = c‚ÇÑ - c‚ÇÉ - c‚ÇÇ
	end

    Œ≤ = 1
    Œ± = 0
    if ŒΩ[2] == 1
        Œ≤ += K‚ÇÇ‚ÇÅ * c‚ÇÇ / c‚ÇÅ 
    elseif ŒΩ[2] == 2
        Œ± += K‚ÇÇ‚ÇÅ * c‚ÇÇ / c‚ÇÅ ^ ŒΩ[2]
    end

    if ŒΩ[3] == 1
        Œ≤ += K‚ÇÉ‚ÇÅ * c‚ÇÉ / c‚ÇÅ 
    elseif ŒΩ[3] == 2
        Œ± += K‚ÇÉ‚ÇÅ * c‚ÇÉ / c‚ÇÅ ^ ŒΩ[3]
    end

    cÃÇ‚ÇÅ = (-Œ≤ + sqrt(Œ≤^2 + 4 * Œ± * Z)) / (2Œ±)
    
    cÃÇ‚ÇÇ = K‚ÇÇ‚ÇÅ * c‚ÇÇ * cÃÇ‚ÇÅ^ŒΩ[2] / c‚ÇÅ^ŒΩ[2]
    cÃÇ‚ÇÉ = K‚ÇÉ‚ÇÅ * c‚ÇÉ * cÃÇ‚ÇÅ^ŒΩ[3] / c‚ÇÅ^ŒΩ[3]
 
	return [cÃÇ‚ÇÅ, cÃÇ‚ÇÇ, cÃÇ‚ÇÉ, 0]
end


function flowingConcentrations(cÃÇ, c‚±º‚ÇÑ, ec::IonExchangeProblem)
    K‚ÇÇ‚ÇÅ = ec.K‚ÇÇ‚ÇÅ
    K‚ÇÉ‚ÇÅ = ec.K‚ÇÉ‚ÇÅ
    K‚ÇÇ‚ÇÉ = ec.K‚ÇÇ‚ÇÉ
    ŒΩ = ec.ŒΩ

    cÃÇ‚ÇÅ, cÃÇ‚ÇÇ, cÃÇ‚ÇÉ = cÃÇ
    
    Œ± = 0
    Œ≤ = 1

    Œ∑‚ÇÇ =  cÃÇ‚ÇÇ / K‚ÇÇ‚ÇÅ / cÃÇ‚ÇÅ^ ŒΩ[2] 
    Œ∑‚ÇÉ =  cÃÇ‚ÇÉ / K‚ÇÉ‚ÇÅ / cÃÇ‚ÇÅ^ ŒΩ[3] 

    if ŒΩ[2] == 1
        Œ≤ += Œ∑‚ÇÇ
    elseif ŒΩ[2] == 2
        Œ± += Œ∑‚ÇÇ
    end

    if ŒΩ[3] == 1
        Œ≤ += Œ∑‚ÇÉ
    elseif ŒΩ[3] == 2
        Œ± += Œ∑‚ÇÉ
    end

    c‚ÇÅ = (-Œ≤ + sqrt(Œ≤^2 + 4* Œ± * c‚±º‚ÇÑ)) / (2Œ±)

    c‚ÇÇ = cÃÇ‚ÇÇ * c‚ÇÅ^ ŒΩ[2] / K‚ÇÇ‚ÇÅ / cÃÇ‚ÇÅ ^ ŒΩ[2] 
    c‚ÇÉ = cÃÇ‚ÇÉ * c‚ÇÅ^ ŒΩ[3] / K‚ÇÉ‚ÇÅ/ cÃÇ‚ÇÅ ^ ŒΩ[3] 

    return [c‚ÇÅ, c‚ÇÇ, c‚ÇÉ, c‚±º‚ÇÑ]
end



function eigenvectors(c, ec::IonExchangeProblem)
    cÃÇ‚ÇÇ‚ÇÇ, cÃÇ‚ÇÇ‚ÇÉ, cÃÇ‚ÇÉ‚ÇÇ, cÃÇ‚ÇÉ‚ÇÉ = derivative_functions(c, ec)

	œÉ‚ÇÇ = 1 + (cÃÇ‚ÇÇ‚ÇÇ + cÃÇ‚ÇÉ‚ÇÉ - sqrt((cÃÇ‚ÇÇ‚ÇÇ - cÃÇ‚ÇÉ‚ÇÉ)^2 + 4cÃÇ‚ÇÇ‚ÇÉ * cÃÇ‚ÇÉ‚ÇÇ)) / 2
	œÉ‚ÇÉ = 1 + (cÃÇ‚ÇÇ‚ÇÇ + cÃÇ‚ÇÉ‚ÇÉ + sqrt((cÃÇ‚ÇÇ‚ÇÇ - cÃÇ‚ÇÉ‚ÇÉ)^2 + 4cÃÇ‚ÇÇ‚ÇÉ * cÃÇ‚ÇÉ‚ÇÇ)) / 2

	return œÉ‚ÇÇ, œÉ‚ÇÉ
end


function derivative_functions(c, ec::IonExchangeProblem)
    ‚àá(f, x) = derivative(f, x)
	
    cÃÇ‚ÇÇ(c‚ÇÇ, c‚ÇÉ, c‚ÇÑ) = isotherm([c‚ÇÇ, c‚ÇÉ, c‚ÇÑ], ec)[2]
    cÃÇ‚ÇÉ(c‚ÇÇ, c‚ÇÉ, c‚ÇÑ) = isotherm([c‚ÇÇ, c‚ÇÉ, c‚ÇÑ], ec)[3]

    ‚àÇcÃÇ‚ÇÇ‚àÇc‚ÇÇ(c‚ÇÇ, c‚ÇÉ, c‚ÇÑ) = ‚àá(c‚ÇÇ -> cÃÇ‚ÇÇ(c‚ÇÇ, c‚ÇÉ, c‚ÇÑ), c‚ÇÇ)
    ‚àÇcÃÇ‚ÇÇ‚àÇc‚ÇÉ(c‚ÇÇ, c‚ÇÉ, c‚ÇÑ) = ‚àá(c‚ÇÉ -> cÃÇ‚ÇÇ(c‚ÇÇ, c‚ÇÉ, c‚ÇÑ), c‚ÇÉ)

    ‚àÇcÃÇ‚ÇÉ‚àÇc‚ÇÉ(c‚ÇÇ, c‚ÇÉ, c‚ÇÑ) = ‚àá(c‚ÇÉ -> cÃÇ‚ÇÉ(c‚ÇÇ, c‚ÇÉ, c‚ÇÑ), c‚ÇÉ)
    ‚àÇcÃÇ‚ÇÉ‚àÇc‚ÇÇ(c‚ÇÇ, c‚ÇÉ, c‚ÇÑ) = ‚àá(c‚ÇÇ -> cÃÇ‚ÇÉ(c‚ÇÇ, c‚ÇÉ, c‚ÇÑ), c‚ÇÇ)

    return ‚àÇcÃÇ‚ÇÇ‚àÇc‚ÇÇ(c...), ‚àÇcÃÇ‚ÇÇ‚àÇc‚ÇÉ(c...), ‚àÇcÃÇ‚ÇÉ‚àÇc‚ÇÇ(c...), ‚àÇcÃÇ‚ÇÉ‚àÇc‚ÇÉ(c...)
end


function dc‚ÇÇdc‚ÇÉ(c, ec::IonExchangeProblem)
    cÃÇ‚ÇÇ‚ÇÇ, cÃÇ‚ÇÇ‚ÇÉ, cÃÇ‚ÇÉ‚ÇÇ, cÃÇ‚ÇÉ‚ÇÉ = derivative_functions(c, ec)

    œÉ‚ÇÇ = 1 + (cÃÇ‚ÇÇ‚ÇÇ + cÃÇ‚ÇÉ‚ÇÉ - sqrt((cÃÇ‚ÇÇ‚ÇÇ - cÃÇ‚ÇÉ‚ÇÉ)^2 + 4cÃÇ‚ÇÇ‚ÇÉ * cÃÇ‚ÇÉ‚ÇÇ)) / 2
	œÉ‚ÇÉ = 1 + (cÃÇ‚ÇÇ‚ÇÇ + cÃÇ‚ÇÉ‚ÇÉ + sqrt((cÃÇ‚ÇÇ‚ÇÇ - cÃÇ‚ÇÉ‚ÇÉ)^2 + 4cÃÇ‚ÇÇ‚ÇÉ * cÃÇ‚ÇÉ‚ÇÇ)) / 2

    return [cÃÇ‚ÇÇ‚ÇÉ / (œÉ‚ÇÇ - 1 - cÃÇ‚ÇÇ‚ÇÇ), cÃÇ‚ÇÇ‚ÇÉ / (œÉ‚ÇÉ - 1 - cÃÇ‚ÇÇ‚ÇÇ)]
end




function integralcurves(u, p, t)
    c‚ÇÑ, ec = p
    c‚ÇÇ, c‚ÇÉ = u, t
    return dc‚ÇÇdc‚ÇÉ([c‚ÇÇ, c‚ÇÉ, c‚ÇÑ], ec)
end


function M2_ODE2(c‚ÇÉ‚Çò‚ÇÇ, c‚±º, c‚Çò‚ÇÅ, ec::IonExchangeProblem)
    

    c‚ÇÉ = 10 .^ range(log10(c‚Çò‚ÇÅ[3]), log10(c‚±º[3]), length=10000)

    f2(u, p, t) = integralcurves(u, p, t)[1]   

    prob2 = ODEProblem(f2,
                    c‚Çò‚ÇÅ[2], 			    # u0
                    (c‚Çò‚ÇÅ[3], c‚ÇÉ‚Çò‚ÇÇ), 		# tspan
                    (c‚±º[4], ec), 			# p
                        )

    sol2 = solve(prob2, RadauIIA5()  ,
                                            reltol=1e-12,
                                            abstol=1e-12,
                                            # alg_hints=[:interpolant],
                                            # maxiters=1e7,
                                            # alg_hints=[:stiff],
                                            saveat=c‚ÇÉ )
    return sol2
end


function M2_ODE3(c‚ÇÉ‚Çò‚ÇÇ, c‚±º, c‚Çò‚ÇÅ, ec::IonExchangeProblem)
    
    c‚ÇÉ = 10 .^ range(log10(c‚±º[3]), log10(c‚Çò‚ÇÅ[3]),  length=10000)


    f3(u, p, t) = integralcurves(u, p, t)[2]

    prob3 = ODEProblem(f3, 
                    c‚±º[2],				    # u0
                    (c‚±º[3], c‚ÇÉ‚Çò‚ÇÇ), 		    # tspan
                    (c‚±º[4], ec))			# p
                    
    sol3 = solve(prob3, RadauIIA5() ,
                                        reltol=1e-12,
                                        abstol=1e-12,
                                        maxiters=1e3,
                                        # alg_hints=[:interpolant],
                                        saveat=c‚ÇÉ,
                                        )

    return sol3
end


function try_M2_ODE3(c‚ÇÉ‚ÇÅ, c‚±º, c‚Çò‚ÇÅ, ec)
    try
        sol3 = M2_ODE3(c‚ÇÉ‚ÇÅ, c‚±º, c‚Çò‚ÇÅ, ec)
        return false
    catch err
        return true
    end
end


function try_M2_ODE2(c‚ÇÉ‚ÇÇ, c‚±º, c‚Çò‚ÇÅ, ec::IonExchangeProblem)
    try
        sol2 = M2_ODE2(c‚ÇÉ‚ÇÇ, c‚±º, c‚Çò‚ÇÅ, ec)
        return true
    catch err
        return false
    end
end

function binary_search(fun, c1, c2, c3, ec)
    left = 1
    right = length(c1)

    mid = left + (right - left) √∑ 2

    while left<right
        mid = left + (right - left) √∑ 2

        if fun(c1[mid], c2, c3, ec)
            right = mid
        else
            left = mid + 1
        end
    end

    return left
end


function solve_IntegralCurve(c‚Çò‚ÇÅ, c‚±º, ec::IonExchangeProblem)
	# c‚ÇÉ‚Çò‚ÇÇ = collect(range(c‚±º[3], c‚Çò‚ÇÅ[3], length=100000))
	c‚ÇÉ‚Çò‚ÇÇ = collect(10 .^ range(log10(c‚±º[3]), log10(c‚Çò‚ÇÅ[3]), length=10000))
	
    i = binary_search(try_M2_ODE2, c‚ÇÉ‚Çò‚ÇÇ, c‚±º, c‚Çò‚ÇÅ, ec)
    sol2 = M2_ODE2(c‚ÇÉ‚Çò‚ÇÇ[i], c‚±º, c‚Çò‚ÇÅ, ec)

    i = binary_search(try_M2_ODE3, c‚ÇÉ‚Çò‚ÇÇ, c‚±º, c‚Çò‚ÇÅ, ec)
    sol3 = M2_ODE3(c‚ÇÉ‚Çò‚ÇÇ[i-1], c‚±º, c‚Çò‚ÇÅ, ec)

    c‚ÇÉ‚Çò‚ÇÇ = fzero(c -> sol2(c) - sol3(c), c‚ÇÉ‚Çò‚ÇÇ[end])

    c‚ÇÇ‚Çò‚ÇÇ = sol2(c‚ÇÉ‚Çò‚ÇÇ)
	c‚Çò‚ÇÇ = [c‚ÇÇ‚Çò‚ÇÇ, c‚ÇÉ‚Çò‚ÇÇ, c‚±º[4]]
	prepend!(c‚Çò‚ÇÇ, c‚Çò‚ÇÇ[3] - c‚Çò‚ÇÇ[2] - c‚Çò‚ÇÇ[1])

	return c‚Çò‚ÇÇ, sol2, sol3
end


function RH_eigenvalues(c‚Çó, c·µ£, ec)
    cÃÇ‚ÇÅ·µ£, cÃÇ‚ÇÇ·µ£, cÃÇ‚ÇÉ·µ£, cÃÇ‚ÇÑ·µ£ = isotherm(c·µ£, ec)
    cÃÇ‚ÇÅ‚Çó, cÃÇ‚ÇÇ‚Çó, cÃÇ‚ÇÉ‚Çó, cÃÇ‚ÇÑ‚Çó = isotherm(c‚Çó, ec)
    œÉÃÉ = ((cÃÇ‚ÇÉ·µ£ + c·µ£[3]) - (cÃÇ‚ÇÉ‚Çó + c‚Çó[3])) / (c·µ£[3] - c‚Çó[3])
    ŒªÃÉ = 1 ./ œÉÃÉ 
    return c‚Çó[2], c‚Çó[3], œÉÃÉ, ŒªÃÉ
end


function integral_eigenvalues(c‚Çó, c·µ£, p, sol, ec)
    c‚ÇÑ = c‚Çó[4]
    c‚ÇÉ = collect(range(c‚Çó[3], c·µ£[3], length=20))
    c‚ÇÇ = [sol(c) for c in c‚ÇÉ]

    if p == 2
        œÉ = [eigenvectors([c‚ÇÇ c‚ÇÉ c‚ÇÑ], ec)[1] for (c‚ÇÇ, c‚ÇÉ) in zip(c‚ÇÇ, c‚ÇÉ)]
    elseif p == 3
        œÉ = [eigenvectors([c‚ÇÇ c‚ÇÉ c‚ÇÑ], ec)[2] for (c‚ÇÇ, c‚ÇÉ) in zip(c‚ÇÇ, c‚ÇÉ)]
    end

    Œª = 1 ./ œÉ

    return c‚ÇÇ, c‚ÇÉ, œÉ, Œª
end